!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@angular/material/input"),require("@angular/common"),require("@angular/platform-browser"),require("@angular/material/form-field"),require("@angular/platform-browser/animations"),require("@angular/cdk/text-field"),require("@angular/material/autocomplete"),require("@angular/material/select")):"function"==typeof define&&define.amd?define("angular-easy-form",["exports","@angular/core","@angular/forms","@angular/material/input","@angular/common","@angular/platform-browser","@angular/material/form-field","@angular/platform-browser/animations","@angular/cdk/text-field","@angular/material/autocomplete","@angular/material/select"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["angular-easy-form"]={},e.ng.core,e.ng.forms,e.ng.material.input,e.ng.common,e.ng.platformBrowser,e.ng.material.formField,e.ng.platformBrowser.animations,e.ng.cdk.textField,e.ng.material.autocomplete,e.ng.material.select)}(this,(function(e,t,n,o,l,a,i,r,u,p,s){"use strict";var c=function(){function e(){this.eventsForm=new t.EventEmitter,this.allFields={}}return e.prototype.ngOnInit=function(){},e.prototype.ngOnChanges=function(e){},e.prototype.eventGroupFields=function(e){this.allFields=Object.assign(this.allFields,e),this.eventsForm.emit(this.allFields)},e}();c.decorators=[{type:t.Component,args:[{selector:"lib-angular-easy-form",template:"<lib-group-fields *ngFor=\"let horizontalFields of masterConfig.fields\"\r\n [style]='masterConfig.style' \r\n [configGroup]='horizontalFields'\r\n (eventGroupInput) ='eventGroupFields($event)'\r\n ></lib-group-fields>\r\n",styles:["./angular-easy-form.component.css"]}]}],c.ctorParameters=function(){return[]},c.propDecorators={masterConfig:[{type:t.Input}],eventsForm:[{type:t.Output}]};var m=function(){function e(e){this.fb=e,this.eventInput=new t.EventEmitter}return e.prototype.ngOnInit=function(){this.initiFb(),this.getFormChanges()},e.prototype.initiFb=function(){var e={};e[this.configInput.alias.toString()]=[this.configInput.value||""],this.inputForm=this.fb.group(e)},e.prototype.getFormChanges=function(){var e=this;this.inputForm.valueChanges.subscribe((function(){e.eventInput.emit(e.inputForm)}))},e.prototype.eventValue=function(e){this.eventInput.emit({alias:this.configInput.alias,type:"searchForm",value:e})},e}();m.decorators=[{type:t.Component,args:[{selector:"lib-input",template:'<mat-form-field \n*ngIf="configInput.type !== \'textarea\' &&\n configInput.type !== \'select\' &&\n configInput.type !== \'checkbox\' && \n configInput.type !== \'searchInput\'"\n \n [style]="configInput.style"  [formGroup]="inputForm">\n  <mat-label>{{configInput.label}}</mat-label>\n  <input [type]="configInput.type"\n   matInput [placeholder]="configInput.placeholder"\n   [value]="configInput.value" \n   [minlength]=\'configInput.miniLength\'\n   [maxlength]=\'configInput.maxLength\'\n   [pattern] = \'configInput.pattern\'\n   [disabled]=\'configInput.disable\'\n   [required]= \'configInput.required\'\n   [formControlName]="configInput.alias" >\n</mat-form-field>\n\n<mat-form-field *ngIf="configInput.type === \'textarea\'" [style]="configInput.style"   [formGroup]="inputForm">\n  <mat-label>{{configInput.label}}</mat-label>\n  <textarea matInput  [value]="configInput.value" \n    [disabled]=\'configInput.disable\'\n    [required]= \'configInput.required\'\n    [formControlName]="configInput.alias"\n    [pattern] = \'configInput.pattern\'\n    [minlength]=\'configInput.miniLength\'\n    [maxlength]=\'configInput.maxLength\'\n    resizetofitcontent\n    cdkTextareaAutosize\n  ></textarea>\n</mat-form-field>\n\n<mat-form-field *ngIf="configInput.type === \'select\'"  [style]="configInput.style"  [formGroup]="inputForm">\n  <mat-label>{{configInput.label}}</mat-label>\n  <select matNativeControl [required]=\'configInput.required\'  [formControlName]="configInput.alias">\n    <option *ngIf="configInput.startEmpty" value="">   ----- </option>\n    <option *ngFor="let option of configInput.setOptions" [value]="option.id"> {{option.value}}</option>\n  </select>\n</mat-form-field>\n\n<div class="check-default" [style]="configInput.style" *ngIf="configInput.type === \'checkbox\'" [formGroup]="inputForm">\n  <input type="checkbox"  [checked]="configInput.checked"  [formControlName]="configInput.alias">\n  <label  class="check-label" for="scales">Scales</label>\n</div>\n\n<div class="check-form" *ngIf="configInput.type === \'searchInput\'"  [style]="configInput.style">\n  <app-inputsearch\n  [label]=\'configInput.label\'\n  [validate]=\'configInput.validated\'\n  [preSelected]=\'configInput.valuePreselected\'\n  [preSelectedComparer]=\'\'\n  [allData]=\'configInput.dataOptions\'\n  [itemValue]=\'configInput.valueData\'\n  [itemResult]=\'configInput.showedData\'\n  (sendValue)="eventValue($event)">\n </app-inputsearch>\n</div>\n\n\n',styles:[".check-default{display:flex;margin:18px 0 0;width:200px}.check-label{margin-left:4%}"]}]}],m.ctorParameters=function(){return[{type:n.FormBuilder}]},m.propDecorators={configInput:[{type:t.Input}],eventInput:[{type:t.Output}]};var f=function(){function e(){this.eventGroupInput=new t.EventEmitter,this.fieldsGroup={}}return e.prototype.ngOnInit=function(){},e.prototype.eventFields=function(e){"searchForm"===e.type?(this.fieldsGroup[e.alias]={value:e.value,isValid:e.valid},this.eventGroupInput.emit(this.fieldsGroup)):(this.fieldsGroup[Object.keys(e.value)[0]||Object.keys(e)[0]]={value:e.value,isValid:e.valid,formGroup:e},this.eventGroupInput.emit(this.fieldsGroup))},e}();f.decorators=[{type:t.Component,args:[{selector:"lib-group-fields",template:'<div class="horizontal-group"  >\n    <lib-input class="input-dyn" *ngFor="let field of configGroup" [configInput]=\'field\' (eventInput)="eventFields($event)"></lib-input>\n</div>\n\n\n',styles:[".horizontal-group{display:flex;flex-direction:column;flex-direction:row}.input-dyn{margin-left:1%}"]}]}],f.ctorParameters=function(){return[]},f.propDecorators={configGroup:[{type:t.Input}],eventGroupInput:[{type:t.Output}]};var g=function(){function e(){this.allData=[],this.preSelected="",this.sendValue=new t.EventEmitter,this.sendKeyEvent=new t.EventEmitter,this.focusField=!1,this.myControl=new n.FormControl,this.allComplete=[],this.callNumber=0,this.callOne=0}return e.prototype.ngOnInit=function(){var e=this;this.allComplete=this.allData||[],this.allComplete.map((function(t){var n=t[e.itemResult].toLowerCase();if(t[e.preSelectedComparer]===e.preSelected)return e.myControl.setValue(n.toUpperCase()),void e.filter(e.preSelected)})),this.myControl.valueChanges.subscribe((function(t){e.globalTrigger&&e.globalTrigger.openPanel(),""===t&&e.sendValue.emit({id:"",name:e.label}),""===t&&0===e.callNumber&&(e.allComplete=e.allData,e.callNumber=1),e.filter(t)}))},e.prototype.ngOnChanges=function(e){this.allComplete=e.allData.currentValue},e.prototype.onKey=function(e){this.sendKeyEvent.emit({eventSent:e,field:this.myControl})},e.prototype.filter=function(e){var t=this,n="string"==typeof e?e.toLowerCase():e,o=[];this.allData.map((function(e){("string"==typeof e[t.itemResult]?e[t.itemResult].toLowerCase():e[t.itemResult]).includes(n)&&(t.valuSelectedInit=e.id,o.push(e))})),o.length>1&&0===this.callNumber?(setTimeout((function(){t.autoTrigger.openPanel()}),200),this.callNumber=1):"Delivery Address"===this.label&&0===this.callOne&&(this.selected(this.valuSelectedInit,this.label),this.callOne=1),this.allComplete=o},e.prototype.eventClick=function(e,t){this.globalTrigger=t,t.openPanel()},e.prototype.selected=function(e,t){e&&this.sendValue.emit({id:e,name:this.label})},e}();g.decorators=[{type:t.Component,args:[{changeDetection:t.ChangeDetectionStrategy.OnPush,selector:"app-inputsearch",template:'<div class=\'group-input\'>\n    <label *ngIf="label" >{{label}}</label>\n    <mat-form-field  class="example-full-width form-group" [style.background-color]="myControl.status === \'INVALID\'  && validate ? \'rgb(232, 154, 154)\' : \'\'">\n            <input class="multipleSelect" type="text" [matAutocomplete]="auto" required\n            (keyup)="onKey($event)"\n            aria-label="Number"\n            matInput\n            #trigger="matAutocompleteTrigger"\n            (click)=\'eventClick($event,trigger)\'\n                   [formControl]="myControl"\n                   [matAutocomplete]="auto">\n            <mat-autocomplete #auto="matAutocomplete"  showPanel="true" #selectInp\n            >\n              <mat-option  *ngFor="let item of allComplete" style="display: block" (click)=\'selected(item[itemValue], label); $event.stopPropagation()\' [value]="item[itemResult]">\n                {{item[itemResult]}}\n              </mat-option>\n            </mat-autocomplete>\n      </mat-form-field>\n</div>\n',encapsulation:t.ViewEncapsulation.ShadowDom,styles:[".border-input{border:1px solid grey!important}.group-input{display:flex;flex-direction:column}label{margin-bottom:8px}.mat-form-field-appearance-legacy .mat-form-field-underline{height:0!important}.mat-input-element{padding-left:0}.mat-form-field-appearance-legacy .mat-form-field-infix{border:1px solid #dcdcdc;border-radius:4px 5px;margin-top:0;padding:8px 0 8px 9px}"]}]}],g.ctorParameters=function(){return[]},g.propDecorators={nameField:[{type:t.ViewChild,args:["selectInp"]}],autoTrigger:[{type:t.ViewChild,args:[p.MatAutocompleteTrigger,{static:!0}]}],allData:[{type:t.Input}],searchDefault:[{type:t.Input}],preSelected:[{type:t.Input}],preSelectedComparer:[{type:t.Input}],label:[{type:t.Input}],itemValue:[{type:t.Input}],itemResult:[{type:t.Input}],sendValue:[{type:t.Output}],sendKeyEvent:[{type:t.Output}],validate:[{type:t.Input}],readOnly:[{type:t.Input}]};var d=function(){};d.decorators=[{type:t.NgModule,args:[{declarations:[c,m,f,g],imports:[l.CommonModule,a.BrowserModule,r.BrowserAnimationsModule,o.MatInputModule,u.TextFieldModule,n.ReactiveFormsModule,i.MatFormFieldModule,p.MatAutocompleteModule,s.MatSelectModule,i.MatFormFieldModule],exports:[c]}]}],e.AngularEasyFormComponent=c,e.AngularEasyFormModule=d,e.ɵa=m,e.ɵb=f,e.ɵc=g,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=angular-easy-form.umd.min.js.map