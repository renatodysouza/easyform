{"version":3,"sources":["../src/lib/angular-easy-form.component.ts","../esm2015/lib/src/lib/fields/input/input.component.ts","../esm2015/lib/src/lib/groupFields/group-fields/group-fields.component.ts","../esm2015/src/lib/inputsearch/inputsearch.component.ts","../src/lib/angular-easy-form.module.ts"],"names":["AngularEasyFormComponent","this","eventsForm","EventEmitter","allFields","valueEvent","otherEvents","prototype","ngOnInit","ngOnChanges","changes","eventGroupFields","event","Object","assign","values","keys","toString","emit","Component","args","selector","template","Input","Output","InputComponent","fb","eventInput","initiFb","getFormChanges","setControlName","configInput","alias","value","inputForm","group","_this","valueChanges","subscribe","eventValue","type","FormBuilder","GroupFieldsComponent","eventGroupInput","fieldsGroup","eventFields","isValid","valid","InputsearchComponent","allData","preSelected","sendValue","sendKeyEvent","focusField","myControl","FormControl","allComplete","callNumber","callOne","map","res","str","itemResult","toLowerCase","preSelectedComparer","setValue","toUpperCase","filter","globalTrigger","openPanel","id","name","label","currentValue","onKey","eventSent","field","filterValue","newResult","option","includes","valuSelectedInit","push","length","setTimeout","autoTrigger","selected","eventClick","$event","trigger","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","ShadowDom","ViewChild","MatAutocompleteTrigger","static","NgModule","declarations","imports","CommonModule","BrowserModule","BrowserAnimationsModule","MatInputModule","TextFieldModule","ReactiveFormsModule","MatFormFieldModule","MatAutocompleteModule","MatSelectModule","exports"],"mappings":"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","sourcesContent":["import { Output } from '@angular/core';\nimport { Component, EventEmitter, Input, OnInit, SimpleChanges } from '@angular/core';\nimport { Config } from './interfaces/Config';\n\n@Component({\n  selector: 'lib-angular-easy-form',\n  templateUrl: './angular-easy-form.component.html',\n  styles: ['./angular-easy-form.component.css']\n})\nexport class AngularEasyFormComponent implements OnInit {\n  @Input() masterConfig: Config;\n  @Output() eventsForm = new EventEmitter();\n  allFields: any = {};\n  valueEvent: any = {};\n  otherEvents: any = {};\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // this.easyFormService.setConfig(changes.masterConfig.currentValue());\n  }\n\n  eventGroupFields(event: any) {\n    if (!event) { return }\n    this.allFields = Object.assign(this.allFields, event);\n    this.valueEvent = {\n      otherEvents: this.allFields,\n      values: Object.assign(this.otherEvents, event[Object.keys(event)[0].toString()][0])\n    }\n    this.eventsForm.emit(this.valueEvent)\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ConfigInput } from '../../interfaces/ConfigInput';\n\n\n@Component({\n  selector: 'lib-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.css']\n})\nexport class InputComponent implements OnInit {\n  @Input() configInput: ConfigInput\n\n  @Output() eventInput = new EventEmitter();\n\n  constructor(private fb: FormBuilder) {\n  }\n  inputForm!: FormGroup;\n\n  ngOnInit(): void {\n    this.initiFb();\n    this.getFormChanges();\n  }\n\n  initiFb() {\n    const setControlName: any = {}\n    setControlName[this.configInput.alias.toString()] = [this.configInput.value || '']\n    this.inputForm = this.fb.group(setControlName);\n    this.eventInput.emit(this.inputForm);\n  }\n\n  getFormChanges() {\n    this.inputForm.valueChanges.subscribe(() => {\n      this.eventInput.emit(this.inputForm);\n    });\n  }\n\n  eventValue(event: any) {\n    this.eventInput.emit({ alias: this.configInput.alias, type: 'searchForm', value: event });\n  }\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'lib-group-fields',\n  templateUrl: './group-fields.component.html',\n  styleUrls: ['./group-fields.component.css']\n})\nexport class GroupFieldsComponent implements OnInit {\n  @Input() configGroup: any;\n  @Output() eventGroupInput = new EventEmitter();\n  fieldsGroup: any = {};\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  eventFields(event: any) {\n    if (event.type === 'searchForm') {\n      this.fieldsGroup[event.alias] = {value: event.value, isValid: event.valid };\n      this.eventGroupInput.emit(this.fieldsGroup);\n    } else {\n      this.fieldsGroup[Object.keys(event.value)[0] || Object.keys(event)[0]] = [ event.value, event.valid, event ]\n      this.eventGroupInput.emit(this.fieldsGroup)\n    }\n  }\n\n}\n","import {\n    Component, OnInit, Input,\n    ViewEncapsulation,\n    Output, EventEmitter,\n    ViewChild, ElementRef, ChangeDetectionStrategy, OnChanges, SimpleChanges\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'app-inputsearch',\n    templateUrl: './inputsearch.component.html',\n    styleUrls: ['./inputsearch.component.scss'],\n    encapsulation: ViewEncapsulation.ShadowDom\n})\nexport class InputsearchComponent implements OnInit, OnChanges {\n    @ViewChild('selectInp') nameField: ElementRef;\n    @ViewChild(MatAutocompleteTrigger, { static: true }) autoTrigger: MatAutocompleteTrigger;\n    @Input() allData: any = [];\n    @Input() searchDefault: any;\n    @Input() preSelected = '';\n    @Input() preSelectedComparer: any;\n    @Input() label: string;\n    @Input() itemValue: any;\n    @Input() itemResult: any;\n    @Output() sendValue = new EventEmitter();\n    @Output() sendKeyEvent = new EventEmitter();\n    @Input() validate: boolean;\n    @Input() readOnly: boolean;\n    focusField = false;\n    myControl = new FormControl();\n    filteredOptions: Observable<string[]>;\n    allComplete = [];\n    globalTrigger: any;\n    callNumber = 0;\n    callOne = 0;\n    valuSelectedInit: string;\n    constructor() {\n\n    }\n\n    ngOnInit(): void {\n        this.allComplete = this.allData || [];\n        this.allComplete.map((res: any) => {\n            const str = res[this.itemResult].toLowerCase();\n            if (res[this.preSelectedComparer] === this.preSelected) {\n                this.myControl.setValue(str.toUpperCase());\n                this.filter(this.preSelected);\n                return;\n            }\n        });\n\n        this.myControl.valueChanges.subscribe(value => {\n            if (this.globalTrigger) {\n                this.globalTrigger.openPanel();\n            }\n            if (value === '') {\n                this.sendValue.emit({ id: '', name: this.label });\n            }\n            if (value === '' && this.callNumber === 0) {\n                this.allComplete = this.allData;\n                this.callNumber = 1;\n            }\n            this.filter(value);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.allComplete = changes.allData.currentValue;\n    }\n\n    onKey(event: any) {\n        this.sendKeyEvent.emit({eventSent: event, field: this.myControl});\n    }\n\n    private filter(value: string) {\n        const filterValue = typeof value === 'string' ? value.toLowerCase() : value;\n        const newResult: any = [];\n        this.allData.map((option: any) => {\n            const result = typeof option[this.itemResult] === 'string' ?\n                option[this.itemResult].toLowerCase() : option[this.itemResult];\n            if (result.includes(filterValue)) {\n                this.valuSelectedInit = option.id;\n                newResult.push(option);\n            }\n        });\n        if (newResult.length > 1 && this.callNumber === 0) {\n            setTimeout(() => {\n                this.autoTrigger.openPanel();\n            }, 200);\n            this.callNumber = 1;\n        } else {\n            if (this.label === 'Delivery Address' && this.callOne === 0) {\n                this.selected(this.valuSelectedInit, this.label);\n                this.callOne = 1;\n            }\n        }\n        this.allComplete = newResult;\n\n\n    }\n\n    eventClick($event: any, trigger: any) {\n        this.globalTrigger = trigger;\n        trigger.openPanel();\n    }\n\n    selected(id: any, label: string) {\n        if (!id) {\n            return;\n        }\n        this.sendValue.emit({ id: id, name: this.label });\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularEasyFormComponent } from './angular-easy-form.component';\nimport { InputComponent } from './fields/input/input.component';\nimport { GroupFieldsComponent } from './groupFields/group-fields/group-fields.component';\nimport {MatInputModule} from '@angular/material/input';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport { InputsearchComponent } from './inputsearch/inputsearch.component';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatSelectModule} from '@angular/material/select';\n@NgModule({\n  declarations: [\n    AngularEasyFormComponent,\n     InputComponent, \n     GroupFieldsComponent,\n     InputsearchComponent],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    TextFieldModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatFormFieldModule\n    \n  ],\n  exports: [AngularEasyFormComponent]\n})\nexport class AngularEasyFormModule { }\n\n"]}